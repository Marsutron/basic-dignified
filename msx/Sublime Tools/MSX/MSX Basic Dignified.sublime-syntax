%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
#
# See https://github.com/farique1/basic-dignified
# for the complete Basic Dignified Suite
#
# 01-02-2023
# v2.0
#   Changes to the new Badig 2.0

author: Fred Rique (farique)
url: https://github.com/farique1/basic-dignified
comment: v2.0

name: MSX Basic Dignified
file_extensions: [bad, dmx]
scope: source.msxbasicdignified
first_line_match: (?i)(^##BD:MSX\s*$)

variables:
  ident: '[A-Za-z][A-Za-z_0-9]*'
  ident_error: '[0-9_]+[A-Za-z_0-9]*'

# All case insensitive
contexts:
  prototype:
  - include: 'Comments'

  main:
    # Double quotes
    - match: '"'
      push: double_quoted_string

    # Badig Build configs
    - match: (?i)(^\s*##B(B|D):)(([a-zA-Z_0-9]+)(=)(.*$)|(msx\s*$))
      captures:
        1: comment.msxbasicdignified
        4: entity.name.tag.msxbasicdignified
        5: comment.msxbasicdignified
        6: entity.name.class.msxbasicdignified
        7: variable.parameter.msxbasicdignified

    # Comment block
    - match: (^\s*'')
      push:
        - meta_scope: comment.msxbasicdignified
        - match: (''\s*$)
          pop: true

    # Comment block ###
    - match: (^\s*###)
      push:
        - meta_scope: comment.msxbasicdignified
        - match: (###\s*$)
          pop: true

    # Comment ##
    - match: '(^|\s*)##.*$'
      scope: comment.msxbasicdignified

    # Comment line ' and REM
    - match: (?i)((')|(\brem\b))(.*)$
      captures:
        2: comment.msxbasicdignified
        3: keyword.control.msxbasicdignified
        4: comment.msxbasicdignified

    # Line toggle keep
    - match: '^\s*keep\s+'
      scope: entity.name.tag.msxbasicdignified
      push:
        - match: '(#[a-zA-Z_]\w*\s*)'
          scope: entity.name.tag.msxbasicdignified
        - match: '.+'
          scope: invalid.msxbasicdignified
        - match: '$'
          pop: true

    # Line toggle lines
    - match: '^\s*(#[a-zA-Z_]\w*)\s+'
      scope: entity.name.tag.msxbasicdignified
      push:
        - match: '\s*\d+'
          scope: invalid.deprecated.msxbasicdignified
        - match: '(?=\D)'
          pop: true

    # DATA line highlights elements and comma only
    - match: '\b(?i:data)(\b|(?=_))'
      push: data_line
      scope: keyword.control.msxbasicdignified

    # Round brackets balancing warning (only highlights missing closed)
    - match: \(
      scope: keyword.operator.msxbasicdignified
      push: brackets
    - match: \)
      scope: invalid.msxbasicdignified

    # Define [?] - print at
    - match: '\[\?\]'
      scope: variable.parameter.msxbasicdignified

    # Define lines
    - match: (?i:^\s*define\s*)
      scope: entity.name.tag.msxbasicdignified
      push: # Identifier
        - match: '\[\s*\]\s*(?=\[)'
          scope: invalid.msxbasicdignified
        - match: '\[\W+\]\s*(?=\[)'
          scope: invalid.msxbasicdignified
        - match: '\[{{ident_error}}\]\s*(?=\[)'
          scope: invalid.msxbasicdignified
        - match: '\[{{ident}}\]\s*(?=\[)'
          scope: variable.parameter.msxbasicdignified
        - match: \[
          scope: variable.parameter.msxbasicdignified
          push: # Definition
            - match: \[
              scope: variable.parameter.msxbasicdignified
              push: # Variable
                - match: \[
                  scope: invalid.msxbasicdignified
                - match: \]
                  scope: variable.parameter.msxbasicdignified
                  pop: true
                - include: main
            - match: \]|$
              scope: variable.parameter.msxbasicdignified
              pop: true
            - include: main
        - match: ',\s*(,|(?=\n|\r))'
          scope: invalid.msxbasicdignified
        - match: '[^\[, \n\r]'
          scope: invalid.msxbasicdignified
        - match: $
          pop: true
        - include: main

    # Define brackets
    - match: '\[{{ident}}\]'
      scope: variable.parameter.msxbasicdignified

    # Line join character _
    - match: '(?<=\W)_(\s+(?=$|(?=##)))'
      push: break_line
      scope: entity.name.tag.msxbasicdignified

    # Special cases for on xxx goto/gosub (are there more?)
    - match: \b(?i:error|interval|key|sprite|stop|strig)\s*(?=(?i:goto|gosub))(\b|(?=_))
      scope: support.function.msxbasicdignified

    # Special cases for defusr e usr
    - match: \b(?i:def\s*usr(\d?))(\b|(?=_))
      captures:
        0: keyword.control.msxbasicdignified
        1: constant.numeric.msxbasicdignified
    - match: \b(?i:usr\s*(\d?)(?=\())(\b|(?=_))
      captures:
        0: support.function.msxbasicdignified
        1: constant.numeric.msxbasicdignified

    #def fn
    - match: \b(?i:(fn)\s+(~?)(\w+)(\$|\%|\!|\#)?(?=\())
      captures:
        1: support.function.msxbasicdignified
        2: keyword.operator.msxbasicdignified
        3: support.function.msxbasicdignified
        4: keyword.operator.msxbasicdignified

    # Instructions (several are position and context sensitive)
    # review: base key play strig stick pdl pad time date set...
    # catching 'key' if after ^ or : unless followed by (
    # Call previous matches (\sadjust|\spause|\spcmplay|\spcmrec|(\s\w{,15})|\b)
    - match: \b(?i:as(?=\s*#|\s*\w+\$)|auto|as|beep|bload|bsave|circle|clear|cload|close|cls|cmd|color|cont|copy|copy|csave|csrlin|data|(def)(dbl|(?=\s?fn)|int|sng|str)|delete|dim|draw|dsko\$|else|end|erase|error|field|files|for|get|gosub|goto|if|input(?!\$)|ipl|kanji|key(?!(\()| +\()|kill|let|line|list|llist|load|locate|lprint|lset|maxfiles|merge|motor|name|new|next|off|on|open|out|output|paint|play(?!(\()| +\()|point|poke|preset|print|pset|put|read|renum|restore|resume|return|rset|run|save|screen|(set)(\sadjust|\sbeep|\spage|\spassword|\sprompt|\sscreen|\sscroll|\stitle|\svideo|(\b|(?=_)))|sound|sprite\$|sprite|step|stop|swap|then|to|troff|tron|using|vpoke|wait|width)(\b|(?=_))
      scope: keyword.msxbasicdignified

    # Functions no $ (several are position and context sensitive)
    # review: base key play strig stick pdl pad time date set...
    - match: \b(?i:abs|asc|atn|base|cdbl|cdbl|cint|cint|cos|csng|csng|cvd|cvi|cvs|date|dskf|eof|erl|err|exp|fix|fn|fpos|fre|inp|instr|interval|int|key(?=(\(|\s+\())|len|loc|lof|log|lpos|pad|pdl|peek|play(?=(\(|\s+\())|pos|rnd|sgn|sin|spc|sqr|stick|strig|tab|tan|time|val|varptr|varptr|vdp|vpeek)(\b|(?=_))
      scope: support.function.msxbasicdignified

    # Call and _ get any 15 char string.
    - match: \b(call\s+|_\s*)(\w{,15})(\b|(?=_))
      captures:
        1: keyword.msxbasicdignified
        2: support.function.msxbasicdignified

    # ? do not work with the \b on the instructions match
    - match: '[\?]'
      scope: keyword.msxbasicdignified

    # Functions $ (several are position and context sensitive)
    - match: \b(?i:attr\$|bin\$|chr\$|hex\$|inkey\$|input\$|left\$|mid\$|mkd\$|mki\$|mks\$|oct\$|right\$|space\$|str\$|string\$)
      scope: support.function.msxbasicdignified

    # include
    - match: (?i:^\s*include)\b
      scope: entity.name.tag.msxbasicdignified

    # Endif
    - match: (?i:\bendif\b)
      scope: entity.name.tag.msxbasicdignified

    # Labels with only numbers
    - match: '{\d+?}'
      scope: invalid.msxbasicdignified

    # Labels with valid characters
    - match: '{(\w+?|@)}'
      scope: entity.name.class.msxbasicdignified

    # Labels with everything else
    - match: '{.+?}'
      scope: invalid.msxbasicdignified

    # Loop labels with only numbers
    - match: '^\s*(\d+?){'
      scope: invalid.msxbasicdignified

    # Loop labels open
    - match: '^\s*(\w+?){\s*'
      scope: entity.name.class.msxbasicdignified

    # Loop labels close
    - match: '\s*}\s*$'
      scope: entity.name.class.msxbasicdignified

    # Loop labels exit
    - match: '\s*(?i:exit)\s*$'
      scope: entity.name.tag.msxbasicdignified

    # function definition
    - match: (?i:)(^\s*func\s+)
      scope: entity.name.tag.msxbasicdignified

    # function name
    - match: (?i:)(\.\w+)(?=\()
      scope: entity.name.class.msxbasicdignified

    # ret
    - match: (?i:^\s*\bret\b)
      scope: entity.name.tag.cocobasicdignified

    # colon - instruction separator
    - match: ':'
      scope: comment.msxbasicdignified

    # Separators
    - match: '[.,;]'
      scope: keyword.operator.msxbasicdignified

    # Operators signs and hash
    - match: (?i:\+|-|\*|/|\^|\\|=|<>|>=|<=|<|>|#)
      scope: keyword.operator.msxbasicdignified

    # Operators names
    - match: \b(?i:and|or|not|xor|eqv|imp|mod)(\b|(?=_))
      scope: keyword.operator.msxbasicdignified

    # Boolean type
    - match: \b(?i:true|false)(\b|(?=_))
      scope: constant.numeric.msxbasicdignified

    # Declare lines
    - match: (?i:)(^\s*declare(\s+|$))((,)|(?=.|\s))
      captures:
        1: entity.name.tag.msxbasicdignified
        4: invalid.msxbasicdignified
      push:
        # - meta_scope: constant.global.msxbasicdignified
        - match: '##.*$'
          scope: comment.msxbasicdignified
        - match: '(\s*)\w(\s*)(?=,|\n)'
          scope: invalid.msxbasicdignified
        - match: '\s*(\w{1,2})(\:)'
          scope: invalid.msxbasicdignified
        - match: '(\W)\d+(\W)'
          scope: invalid.msxbasicdignified
        - match: \s*(\w{2,})((\:)[A-Za-z][A-Za-z0-9]?)?\s*(?=\n|,|##)
          captures:
            1: constant.global.msxbasicdignified
            2: variable.parameter.msxbasicdignified
            3: keyword.operator.msxbasicdignified
        - match: '[^,]+?(?=\n|,|##)'
          scope: invalid.msxbasicdignified
        - match: ',\s*(?=\n|,|##)'
          scope: invalid.msxbasicdignified
        - match: (?=$|##)
          pop: true
        - include: main

    # Number at beginning of line
    - match: (^\s*)(\d+|#)\s*(\d*)
      captures:
        2: invalid.msxbasicdignified
        3: invalid.msxbasicdignified

    # Numbers
    - match: '\b([0-9]+[0-9]*)(\.?)([ed][+-])?(\b|(?=_))([%!#]?)'
      captures:
        1: constant.numeric.msxbasicdignified
        2: keyword.operator.msxbasicdignified
        3: keyword.operator.msxbasicdignified
        4: keyword.operator.msxbasicdignified

    # Variables
    - match: '([A-Za-z]\d*)([%!#\$]?)'
      captures:
        1: constant.global.msxbasicdignified
        2: keyword.operator.msxbasicdignified

    # Hex and binary numbers (bug if word after hex touching and beginning with a-f)
    - match: '(&[hH])([0-9a-fA-F]+)|(&[bB])([01]+)|(&[oO])([0-7]+)'
      captures:
        1: keyword.operator.msxbasicdignified
        2: constant.numeric.msxbasicdignified
        3: keyword.operator.msxbasicdignified
        4: constant.numeric.msxbasicdignified
        5: keyword.operator.msxbasicdignified
        6: constant.numeric.msxbasicdignified

    # Declare indicator
    - match: (~)
      scope: variable.parameter.msxbasicdignified
      push:
        - match: \d+(?=\W)
          scope: invalid.msxbasicdignified
        - match: \w{0,2}(?=\W)
          scope: invalid.msxbasicdignified
        - match: (\b|(?=\W))
          pop: true
        - include: main

  break_line:
    - match: (^|\s*)\d+
      scope: constant.numeric.msxbasicdignified
    - match: ((?=_)|\n)
      pop: true
    - include: main

    # Quotes: show join line character _
  double_quoted_string:
    - meta_scope: string.msxbasicdignified
    - match: '"|$'
      pop: true

    # comment (##) stops the highlight, continue if _ added at the end.
    # But _ MUST also be added before the ## so the lines can join
  data_line:
    - meta_scope: constant.global.msxbasicdignified
    - match: '"'
      push:
        - match: ':'
          scope: constant.global.msxbasicdignified
        - match: '("|(?=\n))'
          pop: true
    - match: ','
      scope: keyword.operator.msxbasicdignified
    - match: '(_)(\s+($|(##.*\n)))'
      captures:
        1: entity.name.tag.msxbasicdignified
        4: comment.msxbasicdignified
      push:
        - match: $|(?=:)
          pop: true
        - include: data_line
    - match: '(?<!\S)##.*'
      scope: comment.msxbasicdignified
    - match: '$\n|(?=:)'
      pop: true

    # Round brackets
  brackets:
    - match: \)
      scope: keyword.operator.msxbasicdignified
      pop: true
    - include: main
